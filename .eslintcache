[{"C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\ListaContas.js":"1","C:\\Users\\Matheus\\Desktop\\erp\\src\\screens\\Contas.js":"2","C:\\Users\\Matheus\\Desktop\\erp\\src\\index.js":"3","C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\Lancarconta.js":"4","C:\\Users\\Matheus\\Desktop\\erp\\src\\redux\\store.js":"5","C:\\Users\\Matheus\\Desktop\\erp\\src\\redux\\reducers\\ContasReducer.js":"6","C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\EditCount.js":"7","C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\MyModal.js":"8","C:\\Users\\Matheus\\Desktop\\erp\\src\\screens\\Routers.js":"9"},{"size":3226,"mtime":1616680441735,"results":"10","hashOfConfig":"11"},{"size":671,"mtime":1616159918628,"results":"12","hashOfConfig":"11"},{"size":323,"mtime":1615902084478,"results":"13","hashOfConfig":"11"},{"size":7592,"mtime":1616160437902,"results":"14","hashOfConfig":"11"},{"size":193,"mtime":1615901711011,"results":"15","hashOfConfig":"11"},{"size":1961,"mtime":1616680841652,"results":"16","hashOfConfig":"11"},{"size":6792,"mtime":1616679535159,"results":"17","hashOfConfig":"11"},{"size":1197,"mtime":1616678938938,"results":"18","hashOfConfig":"11"},{"size":320,"mtime":1616517688309,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"gmv39t",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\ListaContas.js",["41","42","43"],"C:\\Users\\Matheus\\Desktop\\erp\\src\\screens\\Contas.js",["44","45","46","47"],"import { te } from 'date-fns/locale'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\nimport LancarConta from '../componentes/Lancarconta'\r\nimport ListaContas from '../componentes/ListaContas'\r\nimport './Contas.css'\r\n\r\nfunction Contas(){\r\n    const [DataFilto, setDataFiltro] = useState( new Date())\r\n    return(\r\n        <Container fluid = \"md\">\r\n            <Row>\r\n                <Col xs = {5}>\r\n                    <LancarConta />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <ListaContas/> \r\n            </Row>\r\n        </Container>\r\n    )    \r\n}\r\nexport default Contas;\r\n","C:\\Users\\Matheus\\Desktop\\erp\\src\\index.js",[],"C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\Lancarconta.js",["48","49","50","51","52"],"import {  useState } from 'react'\r\nimport React from 'react'\r\nimport {format} from 'date-fns'\r\nimport './Lancarconta.css'\r\nimport NumberFormat from 'react-number-format'\r\nimport { Container, Form, Row, Col,  Button, ButtonToolbar } from 'react-bootstrap'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {contaAdd} from '../redux/reducers/ContasReducer'\r\nimport Modal from 'react-modal'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nfunction Lancarconta(){\r\n    const [ModalConta, setModalConta] = useState(false)\r\n    const [NomeCliente, setNomeCliente] = useState('')\r\n    const [ValorCliente, setValorCliente] = useState('')\r\n    const [CpfCliente, setCpfCliente] = useState('')\r\n    const [TipoConta, setTipoConta] = useState('')\r\n    const [TelefoneCliente, setTelefone] = useState('')\r\n    const [EmailCliente, setEmail] = useState('')\r\n    const [DataEmissao, setDataEmissao] = useState( format(new Date(), 'yyyy-MM-dd'))\r\n    const [DataVencimento, setDataVencimento] = useState(format(new Date(), 'yyyy-MM-dd'))\r\n    const [Historico, setHistorico] = useState('');\r\n    const [Conta, setConta] = useState([]);\r\n    const Numero = useSelector((state) => state.contas.length);\r\n    const Dispatch = useDispatch();\r\n\r\n    function SalvarDados(){\r\n        if(NomeCliente && ValorCliente){\r\n            Dispatch(\r\n                contaAdd({\r\n                    ID: Numero + 1,\r\n                    Cliente: NomeCliente,\r\n                    Valor: ValorCliente,\r\n                    DataEmissao: format(new Date(DataEmissao), 'dd/MM/yyyy'),\r\n                    DataVencimento: format(new Date(DataVencimento), 'dd/MM/yyyy'),\r\n                    Historico: Historico,\r\n                })\r\n            )\r\n            LimparDados()    \r\n            setModalConta(false)\r\n        };\r\n\r\n    }\r\n    function SendConta(){\r\n        LimparDados()\r\n      \r\n    }\r\n    \r\n    function LimparDados(){\r\n        setNomeCliente('')\r\n        setValorCliente('')\r\n        setDataEmissao(format(new Date(), 'yyyy-MM-dd'))\r\n        setDataVencimento(format(new Date(), 'yyyy-MM-dd'))\r\n        setHistorico('')\r\n        setCpfCliente('')\r\n        setTipoConta('')\r\n        setTelefone('')\r\n        setEmail('')\r\n        setConta([])\r\n    }\r\n    function Open(){\r\n        setModalConta(!ModalConta)\r\n    }\r\n    return(\r\n        <Container>\r\n            <ButtonToolbar>\r\n                <Button onClick = { () => Open()}> Nova Conta + </Button>\r\n            </ButtonToolbar>\r\n            <Modal\r\n                isOpen = {ModalConta}\r\n                shouldCloseOnEsc = {true}\r\n                onRequestClose = {() => Open()}          \r\n            >\r\n                 <Form>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Numero</Form.Label>\r\n                            <Form.Control value = {Numero+1} disabled = {true}></Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Tipo</Form.Label>\r\n                            <Form.Control as = 'select'>\r\n                                <option> A pagar </option>\r\n                                <option> A receber</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control value = {NomeCliente} onChange = {e => setNomeCliente(e.target.value)} placeholder = 'Nome do Cliente'>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>CPF</Form.Label>\r\n                            <NumberFormat className = 'form-control' value = {CpfCliente}  format = '###.###.###-##'></NumberFormat>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Telefone</Form.Label>\r\n                            <NumberFormat className = 'form-control' format = '(##)#####-####' value = {TelefoneCliente} type = 'tel' onChange = {e => setTelefone(e.target.value)}></NumberFormat>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control value = {EmailCliente} onChange = {e => setEmail(e.target.value)}  placeholder = 'Email' type = 'email'></Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Valor R$</Form.Label>\r\n                            <NumberFormat \r\n                                thousandSeparator = '.' \r\n                                decimalSeparator = ','\r\n                                thousandsGroupStyle = 'thousand'\r\n                                decimalScale = '2'\r\n                                prefix = 'R$'\r\n                                fixedDecimalScale = {true}\r\n                                value = {ValorCliente} \r\n                                className = 'form-control'\r\n                                onChange = {e => setValorCliente(e.target.value)} \r\n                                placeholder = 'Valor R$' type = 'value'>\r\n\r\n                            </NumberFormat>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label> Data de Emiss√£o</Form.Label>\r\n                            <Form.Control value = {DataEmissao} onChange = { e => setDataEmissao(e.target.value)} type = 'date' value = {DataEmissao}></Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Data de Vencimento</Form.Label>\r\n                            <Form.Control value = {DataVencimento} onChange = {e => setDataVencimento(e.target.value)} type = 'date' value = {DataVencimento}></Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Historico</Form.Label>\r\n                            <Form.Control value = {Historico} onChange = {e => setHistorico(e.target.value)} placeholder = 'Descri√ß√£o..' ></Form.Control>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col style = {{justifyContent:'center', alignItems:'center', display:'flex', margin:'10'}}>\r\n                        <Button onClick = {() => SalvarDados()}>Salvar</Button>\r\n                        <Button onClick = {() => LimparDados()}>Limpar</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            </Modal>    \r\n           \r\n        </Container>\r\n    )\r\n    \r\n}\r\nexport default Lancarconta;","C:\\Users\\Matheus\\Desktop\\erp\\src\\redux\\store.js",[],"C:\\Users\\Matheus\\Desktop\\erp\\src\\redux\\reducers\\ContasReducer.js",[],"C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\EditCount.js",["53","54","55","56","57","58","59","60","61","62"],"C:\\Users\\Matheus\\Desktop\\erp\\src\\componentes\\MyModal.js",["63","64","65","66","67","68","69"],"C:\\Users\\Matheus\\Desktop\\erp\\src\\screens\\Routers.js",[],["70","71"],{"ruleId":"72","severity":1,"message":"73","line":2,"column":41,"nodeType":"74","messageId":"75","endLine":2,"endColumn":47},{"ruleId":"72","severity":1,"message":"76","line":2,"column":49,"nodeType":"74","messageId":"75","endLine":2,"endColumn":54},{"ruleId":"72","severity":1,"message":"77","line":3,"column":9,"nodeType":"74","messageId":"75","endLine":3,"endColumn":18},{"ruleId":"72","severity":1,"message":"78","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},{"ruleId":"72","severity":1,"message":"77","line":2,"column":17,"nodeType":"74","messageId":"75","endLine":2,"endColumn":26},{"ruleId":"72","severity":1,"message":"79","line":9,"column":12,"nodeType":"74","messageId":"75","endLine":9,"endColumn":21},{"ruleId":"72","severity":1,"message":"80","line":9,"column":23,"nodeType":"74","messageId":"75","endLine":9,"endColumn":36},{"ruleId":"72","severity":1,"message":"81","line":16,"column":12,"nodeType":"74","messageId":"75","endLine":16,"endColumn":21},{"ruleId":"72","severity":1,"message":"82","line":22,"column":12,"nodeType":"74","messageId":"75","endLine":22,"endColumn":17},{"ruleId":"72","severity":1,"message":"83","line":43,"column":14,"nodeType":"74","messageId":"75","endLine":43,"endColumn":23},{"ruleId":"84","severity":1,"message":"85","line":144,"column":129,"nodeType":"86","endLine":144,"endColumn":150},{"ruleId":"84","severity":1,"message":"85","line":150,"column":134,"nodeType":"86","endLine":150,"endColumn":158},{"ruleId":"72","severity":1,"message":"87","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":19},{"ruleId":"72","severity":1,"message":"88","line":3,"column":46,"nodeType":"74","messageId":"75","endLine":3,"endColumn":59},{"ruleId":"72","severity":1,"message":"89","line":13,"column":24,"nodeType":"74","messageId":"75","endLine":13,"endColumn":37},{"ruleId":"72","severity":1,"message":"81","line":14,"column":12,"nodeType":"74","messageId":"75","endLine":14,"endColumn":21},{"ruleId":"72","severity":1,"message":"90","line":14,"column":23,"nodeType":"74","messageId":"75","endLine":14,"endColumn":35},{"ruleId":"72","severity":1,"message":"82","line":24,"column":12,"nodeType":"74","messageId":"75","endLine":24,"endColumn":17},{"ruleId":"72","severity":1,"message":"91","line":24,"column":19,"nodeType":"74","messageId":"75","endLine":24,"endColumn":27},{"ruleId":"72","severity":1,"message":"92","line":25,"column":11,"nodeType":"74","messageId":"75","endLine":25,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":113,"column":129,"nodeType":"86","endLine":113,"endColumn":150},{"ruleId":"84","severity":1,"message":"85","line":119,"column":134,"nodeType":"86","endLine":119,"endColumn":158},{"ruleId":"72","severity":1,"message":"77","line":2,"column":17,"nodeType":"74","messageId":"75","endLine":2,"endColumn":26},{"ruleId":"72","severity":1,"message":"93","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":20},{"ruleId":"72","severity":1,"message":"94","line":6,"column":8,"nodeType":"74","messageId":"75","endLine":6,"endColumn":19},{"ruleId":"72","severity":1,"message":"95","line":7,"column":9,"nodeType":"74","messageId":"75","endLine":7,"endColumn":17},{"ruleId":"72","severity":1,"message":"96","line":11,"column":12,"nodeType":"74","messageId":"75","endLine":11,"endColumn":17},{"ruleId":"72","severity":1,"message":"97","line":11,"column":19,"nodeType":"74","messageId":"75","endLine":11,"endColumn":27},{"ruleId":"72","severity":1,"message":"98","line":12,"column":21,"nodeType":"74","messageId":"75","endLine":12,"endColumn":31},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'useEffect' is defined but never used.","'te' is defined but never used.","'DataFilto' is assigned a value but never used.","'setDataFiltro' is assigned a value but never used.","'TipoConta' is assigned a value but never used.","'Conta' is assigned a value but never used.","'SendConta' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Container' is defined but never used.","'ButtonToolbar' is defined but never used.","'setCpfCliente' is assigned a value but never used.","'setTipoConta' is assigned a value but never used.","'setConta' is assigned a value but never used.","'contas' is assigned a value but never used.","'ModalTitle' is defined but never used.","'ListaContas' is defined but never used.","'FormText' is defined but never used.","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","'setcontaID' is assigned a value but never used.","no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-global-assign","no-unsafe-negation"]